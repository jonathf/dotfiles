# This file contains snippets that are always defined. I personally
# have snippets for signatures and often needed texts

# sligthly lower priority than everything else since specialized versions
# should overwrite. The user needs to adjust her priority in her snippets to
# ~-55 so that other filetypes will still overwrite.
priority -60

##############
# NICE BOXES #
##############
global !p
import string
import vim
import os
import glob
from datetime import datetime

NOW = datetime.now()


def is_a_path(snip):
    line = os.path.expanduser(os.path.expandvars(snip.buffer[snip.line][:snip.column+1]))
    regex = r"\.?/[a-zA-Z0-9_\-./ ]+$"
    match = re.search(regex, line)
    if match:
        return bool(glob.glob(match.group(0)+"*"))
    return False

def expand_path(match):
    match = match.group(0)
    paths = list(glob.glob(os.path.expanduser(os.path.expandvars(match))+"*"))
    length = max(len(path) for path in paths)
    for idx in range(length, len(match)-1, -1):
        if all(path[:idx] == paths[0][:idx] for path in paths):
            match = paths[0][:idx]
            break
    if os.path.isdir(match):
        match = match + "/"
    return match

endglobal


snippet "(\$HOME|\.|~)?\/[a-zA-Z0-9_\-./ ]+" "system path" "is_a_path(snip)" re
`!p snip.rv=expand_path(match)`
endsnippet

snippet ~ "home path" w
`!p snip.rv="$HOME"`
endsnippet
snippet $HOME "home path" w
`!p snip.rv=os.path.expanduser("~")`
endsnippet

snippet "<t_Ã¼> *" "tab" r

endsnippet

pre_expand "snip.buffer[snip.line] = snip.buffer[snip.line][:1]*len(snip.buffer[snip.line-1]); snip.cursor.set(snip.line, len(snip.buffer[snip.line]))"
snippet "(^[^a-zA-Z0-9 \"])\1+" "underline" br
endsnippet

snippet "20(\d\d?)?" "month" wr
`!p snip.rv="{}-{:02}".format(NOW.year, NOW.month)`
endsnippet
priority -58
snippet "20\d\d-\d\d" "day" rw
`!p snip.rv=(
    "{}-{}".format(match.group(0), NOW.day)
    if "{}-{:02}".format(NOW.year, NOW.month) == match.group(0)
    else "{}-{:02}".format(NOW.year, NOW.month)
)`
endsnippet
priority -59
snippet "20\d\d-\d\d-\d\d" "minute" rw
`!p snip.rv=(
    "{} {:02}:{:02}".format(match.group(0), NOW.hour, NOW.minute)
    if "{}-{:02}-{:02}".format(NOW.year, NOW.month, NOW.day) == match.group(0)
    else "{}-{:02}-{:02}".format(NOW.year, NOW.month, NOW.day)
)`
endsnippet
priority -60
snippet "TODO|DONE" "" wr
`!p snip.rv={"TODO": "DONE", "DONE": "TODO"}[match.group(0)]`
endsnippet

# #lowest on the foodchain
# priority -9000
#
# snippet "^(.*[^ ])? +" "default" br
# `!p snip.rv=match.group(0) + " "*(4-(len(match.group(0)) % 4))`
# endsnippet

# vim:ft=snippets:
