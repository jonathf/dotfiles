#!/bin/bash

OS=$(cat /etc/os-release | grep "^ID=" | sed -e 's/ID=//' | sed -e 's/"//')
[ "$(uname -s)" == "Darwin" ] && OS=mac
echo "Distribution identified as '$OS'"

install_opt="
install [c]ommon software.
install [p]ython and pyenv.
install [f]ish and some command line tools.
install [a]wesome wm, display manager, and some desktop apps.
install [n]eovim and configure plugins
install [q]utebrowser and extensions.
install [g]pg and password manager."
[ "$OS" == "arch" ] && install_opt="$install_opt
[o]ptimize pacman"

read -p "what to do?
$install_opt

[cpfanqo]: " flags

[[ "$flags" == *c* ]] && install_common=y
[[ "$flags" == *p* ]] && install_python=y
[[ "$flags" == *f* ]] && install_fish=y
[[ "$flags" == *a* ]] && install_awesome=y
[[ "$flags" == *n* ]] && install_neovim=y
[[ "$flags" == *q* ]] && install_qutebrowser=y
[[ "$flags" == *g* ]] && install_gpg=y
[[ "$flags" == *o* ]] && optimize_pacman=y

mkdir -p ~/source
cd ~/source

if [ $install_common ]; then

  if [ "$OS" == "arch" ]; then
    if ! command -v yay >/dev/null 2>&1; then
      pacman --noconfirm -S git
      git clone https://aur.archlinux.org/yay.git ~/source/yay
    fi
    pushd ~/source/yay
    git reset --hard
    git pull
    sudo makepkg --noconfirm -si
    popd
    yay -Syu
  else if [ "$OS" == "ubuntu" ]; then
    sudo apt install curl
  else if [ "$OS" = "mac" ]; then
    [ ! -f "$HOME/.Brewfile" ] && brew bundle --global
    brew install cmake
  fi fi fi
  if [[ ! -d ~/.cargo ]]; then
    curl --proto "=https" --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
  fi
fi

if [ "$OS" != "arch" ]; then
  PYTHON=python3
else
  PYTHON=python
fi

if [ $install_python ]; then
  [ ! -d ~/.pyenv ] && git clone https://github.com/pyenv/pyenv ~/.pyenv
  pushd ~/.pyenv
  git reset --hard
  git pull
  popd
  if [ "$OS" == "ubuntu" ]; then
    sudo apt-get install make build-essential libssl-dev zlib1g-dev \
      libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm \
      libncursesw5-dev xz-utils tk-dev libxml2-dev libxmlsec1-dev libffi-dev liblzma-dev
  else if [ "$OS" == "mac" ]; then
    brew install openssl readline sqlite3 xz zlib tcl-tk
  else if [ "$OS" == "arch" ]; then
    yay -S --needed base-devel openssl zlib xz tk
  fi fi fi
fi

if [ "$install_qutebrowser" ]; then
  if [ "$OS" == "arch" ]; then
    yay -Sy --noconfirm qutebrowser lua5.1

  else if [ "$OS" == "ubuntu" ]; then
    sudo apt install --no-install-recommends pipx git ca-certificates python3 python3-venv \
      libgl1 libxkbcommon-x11-0 libegl1-mesa libfontconfig1 libglib2.0-0 libdbus-1-3 \
      libxcb-cursor0 libxcb-icccm4 libxcb-keysyms1 libxcb-shape0 libnss3 libxcomposite1 \
      libxdamage1 libxrender1 libxrandr2 libxtst6 libxi6 libasound2
    pipx install qutebrowser
    pushd ~/personal/qutebrowser
    source ~/.local/pipx/venv/qutebrowser/bin/activate
    ~/.local/pipx/venv/qutebrowser/python scripts/mkvenv.py --keep --pyqt-type link --pyqt-version 6 --virtualenv --update --venv-dir ~/.local/pipx/venvs/qutebrowser/
    deactive
    popd

  else if [ "$OS" == "mac" ]; then
    brew install qutebrowser lua5.1
  fi fi fi
fi

if [ "$install_awesome" ]; then

  if [ "$OS" == "arch" ]; then
    yay -Sy --noconfirm awesome vicious lain xcompmgr \
      network-manager-applet scrot blueman powerline-fonts \
      xorg-xbacklight ttf-ubuntu-font-family \
      xtrlock lightdm-slick-greeter \
      lxappearance materia-gtk-theme alacritty-sixel \
      mpv
      sudo cp -v ~/.config/awesome/{pics/background.jpg,slick-greeter.conf} /etc/lightdm
      sudo chmod -v 644 /etc/lightdm/{background.jpg,slick-greeter.conf}
      sudo mkdir -p /root/.icons/default /root/.config/gtk-3.0
      sudo cp ~/.icons/default/index.theme /root/.icons/default/
      sudo cp ~/.config/gtk-3.0/settings.ini /root/.config/gtk-3.0/
    fc-cache -f -v

  else if [ "$OS" == "ubuntu" ]; then
    sudo add-apt-repository -y ppa:aslatter/ppa
    sudo apt install -y awesome awesome-extra scrot blueman \
      xfce4-power-manager xbacklight xcompmgr alacritty mpv suckless-tools
    git clone https://github.com/copycat-killer/lain ~/.config/awesome/lain
    fc-cache -f -v

  else if [ "$OS" == "mac" ]; then
    brew install awesome
  fi fi fi
fi

if [ "$install_fish" ]; then
  if [ "$OS" == "arch" ]; then
    yay -Sy --noconfirm fish direnv
  else if [ "$OS" == "ubuntu" ]; then
    sudo apt-add-repository -y ppa:fish-shell/release-3
    sudo apt install -y fish direnv
  else if [ "$OS" == "mac" ]; then
    brew install fish direnv
  fi fi fi
  ~/.cargo/bin/cargo install eza
  curl -sS https://starship.rs/install.sh | sh
  ~/.cargo/bin/cargo install ripgrep
fi

if [ "$install_neovim" ]; then
  if [ "$OS" == "arch" ]; then
    yay -Sy --noconfirm neovim-git xsel ninja npm
  else if [ "$OS" == "ubuntu" ]; then
    sudo add-apt-repository -y ppa:neovim-ppa/unstable
    sudo apt install -y xsel neovim lua5.1 ninja-build npm
  else if [ "$OS" == "mac" ]; then
    brew install neovim npm
  fi fi fi
  if [ ! -d ~/.config/nvim/venv ]; then
    $PYTHON -m venv ~/.config/nvim/venv
  fi
  ~/.config/nvim/venv/bin/pip install -Ur ~/.config/requirements.txt
  ~/.config/nvim/venv/bin/pip install neovim-remote
fi

if [ "$install_gpg" ]; then
  if [ "$OS" == "arch" ]; then
    yay -Sy --noconfirm pass xdotool xsel
    echo "pinentry-program /usr/bin/pinentry-gnome3" | sudo tee ~/.gnupg/gpg-agent.conf
  else if [ "$OS" == "ubuntu" ]; then
    sudo apt install -y pass xdotool xsel pinentry-gnome3
    echo "pinentry-program /usr/bin/pinentry-gnome3" | sudo tee ~/.gnupg/gpg-agent.conf
  else if [ "$OS" == "mac" ]; then
    brew install pass gnupg xdotool xsel pinentry pinentry-mac
    echo "pinentry-program /opt/homebrew/bin/pinentry-mac" | sudo tee ~/.gnupg/gpg-agent.conf
  fi fi fi
  if [[ -f "~/.gnupg/private_keys.gpg" ]]; then
    gpg --import ~/.gnupg/private_keys.gpg
    KEY=$(gpg -K | grep -e '^     ' | sed 's/^ \+//')
    echo -e "5\ny\n" |  gpg --command-fd 0 --expert --edit-key $KEY trust
    mv ~/.gnupg/{,delete_my_}private_key.gpg
    gpg --armor --export jonathf@gmail.com > ~/.gnupg/public_key.asc
  else
    KEY=$(gpg -K | grep -e '^     ' | sed 's/^ \+//')
  fi
  if [[ ! -d "~/.password-store" ]]; then
    git clone git@github.com:jonathf/passwords ~/.password-store
  fi
  if [[ ! -f "~/.password-store/.gpg-id" ]]; then
    pass init $KEY
  fi

fi

if [ "$optimize_pacman" ]; then
  yay -Sy --noconfirm reflector
  sudo reflector -l 5 --verbose --sort rate --save /etc/pacman.d/mirrorlist
  yay -Syy --noconfirm
  yay -Sc --noconfirm
fi

yadm remote set-url origin "git@github.com:jonathf/dotfiles.git"
